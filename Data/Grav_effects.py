#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 20 18:06:16 2018

@author: alden
"""

from __future__ import division, print_function
import multiprocessing
import zipfile
import datetime
import cPickle as pickle
import itertools
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap
import seaborn  # Makes the default style of

import warnings
warnings.simplefilter('ignore')

from fatiando.vis import mpl
from fatiando.gravmag import tesseroid, normal_gravity
from fatiando import gridder, utils
from fatiando.inversion import Smoothness2D
import fatiando

from mohoinv import (MohoGravityInvSpherical, make_mesh, TesseroidRelief,
                     split_data, score_test_set, score_seismic_constraints, 
                     score_all, fit_all, predict_seismic)
from datasets import fetch_crust1, load_icgem_gdf, down_sample

ncpu = multiprocessing.cpu_count()
print("Number of cores: {}".format(ncpu))


# Load and plot raw gravity data
data = load_icgem_gdf('../GOCO05c_15km.gdf')
arrays = data['latitude'], data['longitude'], data['height'], data['gravity_ell']
downsample_every = 2
lat, lon, height, grav, shape = down_sample(arrays, data['shape'], 
                                            every=downsample_every)
area = (lat.min(), lat.max(), lon.min(), lon.max())
print("Data area (S, N, W, E): {}".format(area))
print("Number of points in latitude and longitude: {}".format(shape))
print("Original dataset size: {}".format(data['shape']))

bm = Basemap(projection='cyl', 
             llcrnrlon=area[2], urcrnrlon=area[3], 
             llcrnrlat=area[0], urcrnrlat=area[1],
             lon_0=0.5*(area[2] + area[3]), lat_0=0.5*(area[1] + area[0]), 
             resolution='l')

def plot_data(lat, lon, data, shape, cmap, cblabel='mGal', levels=60, ranges=True):
    x, y = bm(lon, lat) # Transform lat and lon into plot coordinates
    kwargs = dict(cmap=cmap)
    if ranges:
        ranges = np.abs([data.min(), data.max()]).max()
        kwargs['vmin'] = -ranges
        kwargs['vmax'] = ranges
    fig = plt.figure(figsize=(7, 6))
    bm.contourf(x.reshape(shape), y.reshape(shape), data.reshape(shape), levels, 
                **kwargs)
    plt.colorbar(pad=0.01, aspect=50).set_label(cblabel)
    bm.drawmeridians(np.arange(-80, -30, 10), labels=[1, 1, 1, 1], linewidth=0.2)
    bm.drawparallels(np.arange(-50, 30, 15), labels=[1, 1, 1, 1], linewidth=0.2)
    bm.drawcoastlines(color="#333333")
    plt.tight_layout(pad=0)
    return fig

plot_data(lat, lon, grav, shape, 'Reds', ranges=False)
plt.title('Raw Gravity')


# Calculate Gravity disturbance
disturbance = grav - normal_gravity.gamma_closed_form(lat, height)

plot_data(lat, lon, disturbance, shape, 'RdBu_r')
plt.title('Gravity disturbance')

# Terrain Correction
topo_data = load_icgem_gdf('../etopo1_15km.gdf', usecols=[-1])
topo, _ = down_sample([topo_data['topography_grd']], topo_data['shape'], 
                      every=downsample_every)
plot_data(lat, lon, topo, shape, cmap='terrain', cblabel='meters')
plt.title('Topography')
topo_model = make_mesh(area, shape, topo, reference=0) 
topo_density = 2891.87155*np.ones(topo_model.size)
# Density in the oceans is rho_water
topo_density[topo_model.relief < topo_model.reference] = -1852
topo_model.addprop('density', topo_density)

topo_effect = tesseroid.gz(lon, lat, height, topo_model, njobs=ncpu)

plot_data(lat, lon, topo_effect, shape, cmap='RdBu_r')
plt.title('Topographic gravitational effect')

bouguer = disturbance - topo_effect
plot_data(lat, lon, bouguer, shape, cmap='RdBu_r')
plt.title('Bouguer anomaly')

now = datetime.datetime.utcnow().strftime('%d %B %Y %H:%M:%S UTC')
header = '\n'.join([
    '# Generated by Grav_effects.py {date}'.format(date=now),
    '# shape (nlat, nlon):',
    '# {nlat} {nlon}'.format(nlat=shape[0], nlon=shape[1]),
    '# lat lon bouguer '])
with open('New_GravFem/GOCO05c_1d_15km.dat', 'w') as f:
    f.write(header)
    np.savetxt(f, np.c_[lat, lon, height, bouguer],fmt='%.5f')

# Remove the effect of sediments
crust1 = fetch_crust1('../crust1.0.tar.gz').cut(area)

# Get the three sedimentary layers from the model. 
# We need to transform their density values into density contrasts with 
# respect to the standard crustal density of 2891.87155 kg/mÂ³.

layers = [l.contrast('density', 2891.87155) 
          for l in [crust1.upper_sediments, crust1.middle_sediments, 
                    crust1.lower_sediments]]
layer_names = ['Upper sediments', 'Middle Sediments', 'Lower sediments']

# Plot the sediment thickness

x, y = bm(crust1.lon + 360, crust1.lat) # Transform lat and lon into plot coordinates
for layer_name, layer in zip(layer_names, layers):
    fig = plt.figure(figsize=(7, 6))
    bm.pcolormesh(x, y, layer.thickness, cmap='copper')
    plt.colorbar(pad=0.01, aspect=10).set_label('Thickness (m)')
    bm.drawmeridians(np.arange(-80, -30, 10), labels=[1, 0, 0, 1], linewidth=0.2)
    bm.drawparallels(np.arange(26, 30, 15), labels=[1, 0, 0, 1], linewidth=0.2)
    bm.drawcoastlines(color="#eeeeee")    
    plt.title(layer_name)
    plt.tight_layout(pad=0)
    

# Calculate the gravitational effect of each layer and the total effect of all layers.

sediment_effects = [tesseroid.gz(lon, lat, height, list(layer.tesseroids), njobs=ncpu) 
                    for layer in layers]
total_sediment_effect = np.sum(sediment_effects, axis=0)

for layer_name, effect in zip(layer_names, sediment_effects):
    plot_data(lat, lon, effect, shape, 'RdBu_r')
    plt.title("Gravitational effect of " + layer_name.lower())

plot_data(lat, lon, total_sediment_effect, shape, cmap='RdBu_r')
plt.title('Total sediment effect')

sedfree_bouguer = bouguer - total_sediment_effect

plot_data(lat, lon, sedfree_bouguer, shape, cmap='RdBu_r')
plt.title('Sediment-free Bouguer anomaly')

now = datetime.datetime.utcnow().strftime('%d %B %Y %H:%M:%S UTC')
header = '\n'.join([
    '# Generated by Grav_effects.py {date}'.format(date=now),
    '# shape (nlat, nlon):',
    '# {nlat} {nlon}'.format(nlat=shape[0], nlon=shape[1]),
    '# lat lon height sedfree_bouguer '])
with open('New_GravFem/GOCO05c_processed.txt', 'w') as f:
    f.write(header)
    np.savetxt(f, np.c_[lat, lon, height, sedfree_bouguer],fmt='%.5f')
    
#now = datetime.datetime.utcnow().strftime('%d %B %Y %H:%M:%S UTC')
#header = '\n'.join([
#    '# Generated by Grav_effects.py {date}'.format(date=now),
#    '# shape (nlat, nlon):',
#    '# {nlat} {nlon}'.format(nlat=shape[0], nlon=shape[1]),
#    '# lat lon height topo gravity disturbance topo_effect bouguer upper_sediment ' + \
#        'middle_sediment lower_sediment total_sediment sedfree_bouguer'
#    ])
#with open('New_GravFem/GOCO05c_processed.txt', 'w') as f:
#    f.write(header)
#    np.savetxt(f, np.c_[lat, lon, height, topo, grav, disturbance, topo_effect, 
#                        bouguer,sediment_effects[0], sediment_effects[1], 
#                        sediment_effects[2], total_sediment_effect, 
#                        sedfree_bouguer],fmt='%.5f')


# Remove the effect of Moho topography
crust1 = fetch_crust1('../crust1.0.tar.gz').cut(area)
reference = -30e3
moho_density_contrast = 500
model = TesseroidRelief(crust1.area, crust1.shape, relief=-crust1.moho_depth.ravel(), 
                        reference=reference)
density = moho_density_contrast*np.ones(model.size)
density[model.relief < model.reference] *= -1
model.addprop('density', density)

print('Tesseroids in the model (M_lat x M_lon): {} x {} = {}'.format(
    model.shape[0], model.shape[1], model.size))


x, y = bm(model.lon.reshape(model.shape), model.lat.reshape(model.shape))

plt.figure(figsize=(7, 6))
plt.title('Moho depth')
bm.pcolormesh(x, y, -0.001*model.relief.reshape(model.shape), cmap='Greens')
plt.colorbar(pad=0.01).set_label('km')
bm.drawmeridians(np.arange(-80, -30, 10), labels=[0, 0, 0, 1], linewidth=0.2)
bm.drawparallels(np.arange(-50, 30, 15), labels=[1, 0, 0, 0], linewidth=0.2)
plt.tight_layout(pad=0)

# clon and clat are the coordinates of the center of each model cell
area = [model.clat.min(), model.clat.max(), model.clon.min(), model.clon.max()]
# Increase the shape to have half the grid spacing
full_shape = [s*2 - 1 for s in model.shape]
grid_height = 5e3
full_lat, full_lon, full_height = gridder.regular(area, full_shape, z=grid_height)
print('Number of grid points: {} x {} = {}'.format(full_shape[0], full_shape[1], 
                                                   full_shape[0]*full_shape[1]))
print('Grid height: {} m'.format(grid_height))

full_data_noisefree = tesseroid.gz(full_lon, full_lat, full_height, model, njobs=ncpu)
full_data = utils.contaminate(full_data_noisefree, 5, seed=0)

now = datetime.datetime.utcnow().strftime('%d %B %Y %H:%M:%S UTC')
header = """# Generated by sinthetic-crust1.ipynb on {date}
# shape (nlat, nlon):
# {nlat} {nlon}
# lat lon height gravity_anomaly_noisefree gravity_anomaly_noisy
""".format(date=now, nlat=full_shape[0], nlon=full_shape[1])
with open('../synthetic-data-crust12.txt', 'w') as f:
    f.write(header)
    np.savetxt(f, np.c_[full_lat, full_lon, full_height, full_data_noisefree, full_data],
               fmt='%.5f')


